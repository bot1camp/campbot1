import os
import json
import pandas as pd
from telebot import TeleBot, types
from dotenv import load_dotenv
import re

# Constants
CANCEL_BUTTON = "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"

# Load environment variables
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
raw_admin = os.getenv("ADMIN_CHAT_ID", "")
try:
    ADMIN_CHAT_ID = int(raw_admin)
except ValueError:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: ADMIN_CHAT_ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º —É .env")
    ADMIN_CHAT_ID = None

if not TOKEN:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN —É .env")
    exit(1)

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Monobank
MONO_LINK = "https://send.monobank.ua/jar/24F7gJ3cw5"

# –û—Å–æ–±–∏—Å—Ç—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É
PRIVAT_CARD = "5168 7520 2133 7889"
PRIVAT_IBAN = "UA52 305299 0262 0364 0092 5651653"
RECEIVER    = "–°–µ–º–µ–Ω—é–∫ –ê–Ω–¥—Ä—ñ–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"

# Initialize bot
bot = TeleBot(TOKEN)

bot.set_my_commands([
    types.BotCommand("start",    "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"),
    types.BotCommand("questions","–ì–æ—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è"),
    types.BotCommand("number",   "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä"),
    types.BotCommand("donate",   "–ü–æ–∂–µ—Ä—Ç–≤—É–≤–∞–Ω–Ω—è"),
    types.BotCommand("register", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–∏—Ç–∏–Ω–∏")
])

DATA_DIR      = 'data'
REGISTER_JSON = os.path.join(DATA_DIR, 'registrations.json')
REGISTER_XLSX = os.path.join(DATA_DIR, 'registrations.xlsx')

if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

if os.path.exists(REGISTER_JSON):
    with open(REGISTER_JSON, 'r', encoding='utf-8') as f:
        registrations = json.load(f)
else:
    registrations = []

user_data = {}

# === –í–∞–ª—ñ–¥–∞—Ü—ñ—è ===
def is_valid_name(text):
    parts = text.strip().split()
    if len(parts) < 2:
        return False
    for part in parts:
        if not re.match(r"^[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë‚Äô'-]+$", part):
            return False
    return True

def is_valid_phone(text):
    return bool(re.match(r"^(?:\+?38)?0\d{9}$", text.strip()))

def is_valid_age(text):
    try:
        age = int(text)
        return 5 <= age <= 16
    except:
        return False

def is_valid_needs(text):
    return len(text.strip()) <= 100

# === –£—Ç–∏–ª—ñ—Ç–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
def send_with_cancel(chat_id, text):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(CANCEL_BUTTON)
    bot.send_message(chat_id, text, reply_markup=keyboard)

# === –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
@bot.message_handler(func=lambda m: m.text == CANCEL_BUTTON)
def handle_cancel(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        user_data.pop(chat_id)
        bot.send_message(chat_id, "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id, "–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó.", reply_markup=types.ReplyKeyboardRemove())

# === –ö–æ–º–∞–Ω–¥–∏ ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    bot.send_message(
        chat_id,
        "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî –±–æ—Ç –¥–∏—Ç—è—á–æ–≥–æ —Ç–∞–±–æ—Ä—É 2025.\n"
        "/questions ‚Äî –≥–æ—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "/register ‚Äî –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–∏—Ç–∏–Ω—É –Ω–∞ —Ç–∞–±—ñ—Ä\n"
        "/donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å –ø–ª–∞—Ç–µ–∂–µ–º",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(commands=['questions'])
def handle_questions(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–†–æ–∑–∫–ª–∞–¥", "–í–∞—Ä—Ç—ñ—Å—Ç—å", "–©–æ –±—Ä–∞—Ç–∏", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=keyboard)

@bot.message_handler(commands=['number'])
def handle_number(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: 0689376905 (–ê–Ω–¥—Ä—ñ–π)", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['donate'])
def handle_donate(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, "üíö –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É!", reply_markup=types.ReplyKeyboardRemove())
    inline = types.InlineKeyboardMarkup(row_width=2)
    inline.add(
        types.InlineKeyboardButton(text="Monobank", url=MONO_LINK),
        types.InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ‚ñ∂Ô∏è", callback_data="show_privat")
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–∫–∞–∑—É:", reply_markup=inline)

@bot.callback_query_handler(func=lambda c: c.data == 'show_privat')
def show_privat_data(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    bot.edit_message_reply_markup(chat_id, callback_query.message.message_id, reply_markup=None)
    text = (
        f"üí≥ *–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫*\n\n"
        f"–ö–∞—Ä—Ç–∫–∞: `{PRIVAT_CARD}`\n"
        f"IBAN: `{PRIVAT_IBAN}`\n"
        f"–û—Ç—Ä–∏–º—É–≤–∞—á: _{RECEIVER}_\n\n"
        "üîÑ –°–∫–æ–ø—ñ—é–π—Ç–µ —Ü—ñ –¥–∞–Ω—ñ –≤ —Å–≤—ñ–π Privat24 —á–∏ —ñ–Ω—à–∏–π –±–∞–Ω–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É."
    )
    bot.send_message(chat_id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == "–†–æ–∑–∫–ª–∞–¥")
def answer_schedule(message):
    bot.send_message(message.chat.id, "üóì –ù–∞—à —Ç–∞–±—ñ—Ä –ø—Ä–∞—Ü—é—î –∑ 5 –ø–æ 7 —Å–µ—Ä–ø–Ω—è, 9:00‚Äì18:00.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "–í–∞—Ä—Ç—ñ—Å—Ç—å")
def answer_price(message):
    bot.send_message(message.chat.id, "üíµ –ë–ª–∞–≥–æ–¥—ñ–π–Ω–∏–π —Ç–∞–±—ñ—Ä; –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ /donate.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "–©–æ –±—Ä–∞—Ç–∏")
def answer_packing(message):
    bot.send_message(message.chat.id, "üéí –ó—Ä—É—á–Ω–∏–π –æ–¥—è–≥, –∫–µ–ø–∫–∞ —Ç–∞ –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
def answer_phone(message):
    bot.send_message(message.chat.id, "üìû 0689376905 (–ê–Ω–¥—Ä—ñ–π)", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "–Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è")
def handle_custom_question(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, forward_to_admin)

def forward_to_admin(message):
    bot.send_message(message.chat.id, "‚úÖ –î—è–∫—É—é! –ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ.")
    if ADMIN_CHAT_ID:
        bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

# === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ===
@bot.message_handler(commands=['register'])
def cmd_register(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'children': []}
    send_with_cancel(chat_id, "üë™ –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ –±–∞—Ç—å–∫–∞/–º–∞—Ç–µ—Ä—ñ:")
    bot.register_next_step_handler(message, process_parent_name)

def process_parent_name(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    if not is_valid_name(message.text):
        send_with_cancel(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ì–∞–≤—Ä–∏–ª—é–∫ –û–ª—è').")
        return bot.register_next_step_handler(message, process_parent_name)
    user_data[chat_id]['parent_name'] = message.text.strip()
    send_with_cancel(chat_id, "–¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ç—å–∫—ñ–≤:")
    bot.register_next_step_handler(message, process_parent_phone)

def process_parent_phone(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    if not is_valid_phone(message.text):
        send_with_cancel(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ 0XXXXXXXXX –∞–±–æ +380XXXXXXXXX.")
        return bot.register_next_step_handler(message, process_parent_phone)
    user_data[chat_id]['parent_phone'] = message.text.strip()
    send_with_cancel(chat_id, "–°–∫—ñ–ª—å–∫–∏ –¥—ñ—Ç–µ–π? –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
    bot.register_next_step_handler(message, process_child_count)

def process_child_count(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    try:
        count = int(message.text)
        assert count > 0
    except:
        send_with_cancel(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥—ñ—Ç–µ–π:")
        return bot.register_next_step_handler(message, process_child_count)
    user_data[chat_id]['child_count'] = count
    user_data[chat_id]['current_child'] = 1
    ask_child_info(chat_id)

def ask_child_info(chat_id):
    idx = user_data[chat_id]['current_child']
    send_with_cancel(chat_id, f"–Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ –¥–∏—Ç–∏–Ω–∏ ‚Ññ{idx}:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_child_name)

def process_child_name(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    if not is_valid_name(message.text):
        send_with_cancel(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è –¥–∏—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–Ü–≤–∞–Ω–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ').")
        return bot.register_next_step_handler(message, process_child_name)
    user_data[chat_id]['children'].append({'name': message.text.strip()})
    send_with_cancel(chat_id, "–í—ñ–∫ –¥–∏—Ç–∏–Ω–∏:")
    bot.register_next_step_handler(message, process_child_age)

def process_child_age(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    if not is_valid_age(message.text):
        send_with_cancel(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏ –≤—ñ–¥ 5 –¥–æ 16.")
        return bot.register_next_step_handler(message, process_child_age)
    user_data[chat_id]['children'][-1]['age'] = int(message.text)
    send_with_cancel(chat_id, "–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ/–∞–ª–µ—Ä–≥—ñ—ó? –Ø–∫—â–æ –Ω—ñ ‚Äî '–ù—ñ':")
    bot.register_next_step_handler(message, process_child_needs)

def process_child_needs(message):
    if message.text == CANCEL_BUTTON:
        return handle_cancel(message)
    chat_id = message.chat.id
    if not is_valid_needs(message.text):
        send_with_cancel(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–æ—Ç—ñ—Ç—å –æ–ø–∏—Å –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return bot.register_next_step_handler(message, process_child_needs)
    user_data[chat_id]['children'][-1]['needs'] = message.text.strip()
    if user_data[chat_id]['current_child'] < user_data[chat_id]['child_count']:
        user_data[chat_id]['current_child'] += 1
        ask_child_info(chat_id)
    else:
        finalize_registration(chat_id)

def finalize_registration(chat_id):
    entry = user_data.pop(chat_id)
    registrations.append(entry)
    with open(REGISTER_JSON, 'w', encoding='utf-8') as f:
        json.dump(registrations, f, ensure_ascii=False, indent=2)
    df = pd.json_normalize(registrations, 'children', ['parent_name', 'parent_phone', 'child_count'])
    df.to_excel(REGISTER_XLSX, index=False)
    bot.send_message(chat_id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(
        chat_id,
        "üì£ –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –≥—Ä—É–ø–∏ —Ç–∞–±–æ—Ä—É 2025: [t.me/tabir_parents](https://t.me/tabir_parents)",
        parse_mode='Markdown'
    )
    if ADMIN_CHAT_ID:
        summary = f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥ {entry['parent_name']} ({entry['parent_phone']})"
        for i, c in enumerate(entry['children'], 1):
            summary += f"\n{i}. {c['name']}, –≤—ñ–∫ {c['age']}, {c['needs']}"
        bot.send_message(ADMIN_CHAT_ID, summary)

# Run bot
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î‚Ä¶")
    bot.infinity_polling(timeout=60)
